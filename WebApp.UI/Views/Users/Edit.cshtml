@model WebApp.UI.ViewModels.UserEditViewModel

@{
    ViewData["Title"] = "Edit User";
}

<h1 class="my-4">Edit User</h1>

<form asp-action="Edit" method="post" class="card p-3" style="max-width: 800px;">
    @Html.AntiForgeryToken()
    <input type="hidden" asp-for="UserId" />

    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="mb-3">
        <label asp-for="Name" class="form-label" aria-label="Name"></label>
        <input asp-for="Name" class="form-control" aria-label="Name" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="Email" class="form-label" aria-label="Email"></label>
        <input asp-for="Email" class="form-control" aria-label="Email" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label asp-for="SelectedRoleId" class="form-label" aria-label="Role"></label>
        <select asp-for="SelectedRoleId" class="form-select" aria-label="Role">
            <option value="">-- Select a Role --</option>
            @foreach (var role in Model.Roles)
            {
                <option value="@role.Id" selected="@(Model.SelectedRoleId == role.Id)">@role.Name</option>
            }
        </select>
        <span asp-validation-for="SelectedRoleId" class="text-danger"></span>
    </div>

    <div class="mb-3">
        <label class="form-label" aria-label="Tasks">Tasks:</label><br />
        <div class="d-flex flex-wrap" style="gap:10px;">
            @foreach (var task in Model.AllTasks)
            {
                bool isSelected = Model.SelectedTasks.Contains(task.Id);
                <span class="selectable-item @(isSelected ? "selectable-selected" : "selectable-unselected")" data-id="@task.Id" style="cursor:pointer;" aria-label="@task.Name">
                    @task.Name
                    @if (isSelected)
                    {
                        <input type="hidden" name="SelectedTasks" value="@task.Id" />
                    }
                </span>
            }
        </div>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-success btn-sm">Save</button>
        <a href="@Url.Action("Index")" class="btn btn-secondary btn-sm">Cancel</a>
    </div>
</form>

@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial");
    <script>
        document.querySelectorAll('.selectable-item').forEach(item => {
            item.addEventListener('click', () => {
                const taskId = item.getAttribute('data-id');
                const hiddenInput = item.querySelector(`input[name="SelectedTasks"][value="${taskId}"]`);

                if (hiddenInput) {
                    hiddenInput.remove();
                    item.classList.remove('selectable-selected');
                    item.classList.add('selectable-unselected');
                } else {
                    const hidden = document.createElement('input');
                    hidden.type = 'hidden';
                    hidden.name = 'SelectedTasks';
                    hidden.value = taskId;
                    item.appendChild(hidden);
                    item.classList.remove('selectable-unselected');
                    item.classList.add('selectable-selected');
                }
            });
        });
    </script>
    <style>
        .selectable-selected {
            background-color: #d1e7dd;
            border: 1px solid #0f5132;
            border-radius: 5px;
            padding: 5px;
        }

        .selectable-unselected {
            background-color: #f8d7da;
            border: 1px solid #842029;
            border-radius: 5px;
            padding: 5px;
        }
    </style>
}